Техническое задание: Telegram-бот для управления сборами средств

Обзор

Данный бот предназначен для создания и ведения денежных сборов (например, на подарки, благотворительность и т.д.) в стиле диалога, аналогично принципам взаимодействия с ботом BotFather. Взаимодействие реализовано пошагово с использованием кнопок вместо ввода команд вручную. Пользователь может в любой момент прервать текущий сценарий или вернуться к предыдущему шагу. Бот обрабатывает некорректный ввод (неправильный формат, дублирование и т.п.) и после каждого шага даёт понятную обратную связь. Вся логика будет реализована на TypeScript; хранение данных о сборе происходит в базе данных для последующего доступа через команду /history. Ниже описана структура сценариев и подробная диалоговая логика для каждой команды. Язык интерфейса бота – русский.

Дерево сценариев

Ниже приведена структура диалоговых сценариев и переходов между шагами для поддерживаемых команд: /start, /help, /new, /paid, /finish, /cancel, /history.
	•	Начало работы (/start) – Приветствие пользователя и вывод главного меню с кнопками основных команд:
	•	Кнопка “Новый сбор” – запускает сценарий создания нового сбора (эквивалент команды /new).
	•	Кнопка “История сборов” – показывает историю всех созданных сборов (эквивалент /history).
	•	Кнопка “Помощь” – выводит справочную информацию о работе бота (эквивалент /help).
	•	Помощь (/help) – Вывод справки с описанием доступных команд и кратких инструкций по их использованию. (Дублируется в главном меню кнопкой “Помощь”.)
	•	Создание нового сбора (/new) – Пошаговый сценарий:
	1.	Шаг 1 – Название сбора: Бот спрашивает название/цель сбора.
	•	Пользователь вводит текстовое название.
	•	Валидация: название не должно быть пустым.
	•	Действия: при корректном вводе сохраняется название и переход к шагу 2; при пустом вводе – сообщение об ошибке и повтор запроса названия; при отмене (/cancel) – сценарий прерывается (возврат в меню).
	2.	Шаг 2 – Целевая сумма: Бот запрашивает сумму, которую планируется собрать.
	•	Пользователь вводит сумму числом (целое число в рублях).
	•	Валидация: ввод должен быть положительным числом; недопустимы буквы, ноль или отрицательные значения.
	•	Действия: при корректном вводе сумма сохраняется; при неправильном формате – сообщение об ошибке и повтор запроса суммы; пользователь также может нажать кнопку “Назад” для возврата к шагу 1 (изменить название) либо отменить /cancel для выхода без создания.
	3.	Завершение создания: После получения корректных данных бот создаёт новый сбор (запись сохраняется в БД: название, цель, сумма=0, статус «активен», дата создания и пр.). Бот отправляет пользователю подтверждение об успешном создании сбора с кратким итогом и предлагает варианты действий:
	•	Показать информацию о созданном сборе (название и цель, собранная сумма на данный момент = 0).
	•	Кнопки для дальнейшей навигации:
“Добавить платёж” (эквивалент /paid) – отметить поступление средств в данный сбор.
“Завершить сбор” (эквивалент /finish) – завершить сбор, зафиксировав итог.
“Отменить сбор” (эквивалент /cancel) – отменить и удалить сбор, если он более не нужен.
“Главное меню” – возвращение к общему меню (может быть реализовано как /start).
	•	Добавление платежа (/paid) – Сценарий фиксации поступивших средств в активный сбор:
	•	Если нет активных сборов, бот сразу отвечает ошибкой (нет сборов для добавления платежа).
	•	Если активен только один сбор, шаг выбора пропускается и платеж добавляется в него по умолчанию.
	•	Если активных сборов несколько, бот сперва предлагает выбрать, в какой сбор добавить поступление. Пользователю отображается список его текущих активных сборов (названия) в виде кнопок. После выбора конкретного сбора бот перейдёт к шагу ввода данных платежа.
	1.	Шаг 1 – Имя плательщика/комментарий: Бот запрашивает у пользователя, от кого или за что получен платеж (например, имя человека, кто сдал деньги, либо комментарий).
	•	Пользователь вводит текст (имя плательщика или пометка).
	•	Валидация: поле может быть любым непустым текстом (для идентификации платежа).
	•	Действия: при вводе текста сохраняется комментарий и переходим к шагу 2; при пустом вводе – сообщение “имя/комментарий не может быть пустым” и повтор запроса; при отмене (/cancel) на этом этапе – операция добавления платежа прерывается, данных в сбор не добавляется.
	2.	Шаг 2 – Сумма платежа: Бот просит указать сумму полученных средств.
	•	Пользователь вводит сумму цифрами.
	•	Валидация: должна быть положительное число (рублей), без посторонних символов.
	•	Действия: при корректном вводе сумма фиксируется; при ошибочном вводе (не число или <=0) – бот сообщает о некорректности и повторно просит сумму; на этом шаге доступна кнопка “Назад” для возврата к шагу 1 (если, например, нужно исправить имя/комментарий) и команда /cancel для отмены операции.
	3.	Завершение добавления: При успешном вводе имени и суммы бот сохраняет платеж в базе данных (добавляет запись платежа, привязанную к сбору: сумма, комментарий, дата). Одновременно обновляется текущая собранная сумма по данному сбору. Бот отправляет сообщение-подтверждение, например: “Платёж 500 руб от Иван успешно добавлен. Собрано 500 из 10000 руб.” (с подстановкой реальных данных).
	•	Если в результате добавления общая собранная сумма достигла или превысила цель, бот дополнительно уведомляет: “Целевая сумма сбора достигнута!”. (Сбор остаётся активным, пока пользователь явным образом не завершит его командой /finish — бот не завершает автоматически.)
	•	Бот предлагает дальнейшие действия кнопками: “Добавить ещё платёж” (повторно запускает сценарий /paid для добавления следующего поступления), “Завершить сбор” (/finish текущий сбор) или “Главное меню”.
	•	Завершение сбора (/finish) – Операция завершения текущего сбора (когда сбор завершён по достижении цели или по решению организатора):
	•	Если нет активных сборов, бот выдаёт сообщение об ошибке: “Нет активных сборов, которые можно завершить.”.
	•	Если активен только один сбор, он выбирается автоматически для завершения.
	•	Если активных сборов несколько, бот сначала спрашивает, какой сбор завершить – выводит список названий активных сборов с кнопками выбора.
	1.	Шаг 1 – Подтверждение: Бот запрашивает подтверждение у пользователя на завершение выбранного сбора. Например: “Завершить сбор «Подарок коллеге»? Это зафиксирует итоговую сумму и закроет сбор для новых платежей.”
	•	Кнопки: “✅ Да, завершить”, “❌ Отмена” (либо одна кнопка “Отмена” для отказа, либо использование команды /cancel).
	•	Пользователь подтверждает или отменяет действие.
	•	Действия: при подтверждении бот помечает данный сбор как завершённый (статус обновляется в БД, сохраняется время завершения, итоговая собранная сумма и т.д.). При отмене подтверждения (нажатие “Отмена” либо команда /cancel) бот не вносит изменений и сообщает, что операция отменена.
	2.	Шаг 2 – Результат: Бот отправляет финальное сообщение о завершении сбора. Пример сообщения: “Сбор «Подарок коллеге» завершён. Итог: собрано 9500 из 10000 руб.” (если цель не полностью достигнута) или “Сбор «Помощь приюту» успешно завершён. Цель 5000 руб достигнута, собрано 5000 руб.”. Бот благодарит пользователя или отмечает результат по желанию. Данный сбор больше не считается активным.
	•	После этого пользователю предлагается вернуться в главное меню (кнопка “Главное меню” или совет воспользоваться командами далее).
	•	Завершённый сбор сохраняется в истории (БД) и будет отображён в списке /history.
	•	Отмена сбора (/cancel) – Двойной сценарий, в зависимости от контекста:
	•	Отмена текущего диалогового шага: Если команда /cancel получена во время выполнения любого пошагового сценария (/new или /paid), то бот прерывает текущий сценарий. Все промежуточные несохранённые данные отбрасываются.
	•	Бот сообщает пользователю: “Действие отменено.” (или “Создание сбора отменено.”, “Добавление платежа отменено.” – в зависимости от прерванного процесса) и возвращает пользователя в исходное состояние (главное меню). Пользователь сможет начать заново или выполнить другую команду.
	•	Отмена активного сбора: Если команда /cancel получена вне контекста ввода данных (т.е. пользователь не в середине ответа на другой запрос), то бот трактует её как команду отмены/удаления всего сбора:
	•	Если нет активных сборов, бот ответит: “Сейчас нет активного сбора, который можно отменить.” (ничего не происходит).
	•	Если активен только один сбор, бот уточняет намерение отмены этого сбора. Например: “Вы действительно хотите отменить сбор «Ремонт класса»? Все данные этого сбора будут удалены без возможности восстановления.”
	•	Пользователь должен подтвердить (кнопка “✅ Отменить сбор” или повторная команда) либо отказаться (кнопка “❌ Не отменять”).
	•	При подтверждении бот помечает сбор как отменённый и удаляет его из списка активных (в БД статус сменяется на «отменён», либо запись удаляется – на усмотрение реализации). Бот отвечает пользователю: “Сбор «Ремонт класса» отменён и удалён.”.
	•	При отказе (или если пользователь передумал) – бот сообщает: “Отмена сбора отменена. Сбор продолжает оставаться активным.” (формулировка может быть иной, суть – действие не выполнено).
	•	Если активных сборов несколько, бот сначала предлагает выбрать, какой сбор отменить – список активных сборов в виде кнопок. Пользователь выбирает нужный. Далее выполняется тот же шаг подтверждения, описанный выше, для выбранного сбора.
	•	История сборов (/history) – Вывод информации о всех сборах, созданных пользователем (сохранённых в базе данных):
	•	Бот извлекает из базы все сборы пользователя – как активные (если есть незавершённые), так и завершённые и отменённые.
	•	Информация выводится в удобочитаемом формате. Например, списком по категориям:
	•	Активные сборы:
• «Название1» – собрано X из Y руб (продолжается)
• «Название2» – собрано N из M руб (продолжается)
	•	Завершённые сборы:
• «Название3» – собрано Z из Z руб (завершён успешно)
• «Название4» – собрано P из Q руб (завершён, цель не достигнута)
	•	Отменённые сборы:
• «Название5» – отменён (было собрано R из W руб на момент отмены)
	•	Если сборов ещё не создавалось, бот отправит сообщение: “История пуста – вы ещё не создавали сборы.”.
	•	После вывода истории бот может предложить вернуться в меню (например, кнопка “Главное меню”). Поскольку /history не является пошаговым сценарием, дальнейшие действия – по выбору пользователя (например, он может сразу запустить /new из меню).

Детальное описание логики команд и сообщений

Ниже перечислены все команды, ожидаемые действия пользователя и реакции бота (для правильного и неправильного ввода), а также используемые на каждом этапе кнопки. Все текстовые сообщения, отправляемые ботом пользователю, приведены на русском языке и должны быть использованы в реализации напрямую.

Команда /start (Запуск бота)

Сценарий: Пользователь начинает работу с ботом, набрав команду /start или открыв бот в первый раз.
	•	Действия бота: отправляет приветственное сообщение и главное меню. Пример приветствия:
«Привет! Я помогу организовать сбор средств и отслеживать поступления. Выберите действие на кнопках ниже.»
	•	Кнопки меню: (реализуются с помощью ReplyKeyboardMarkup или inline-кнопок)
	•	“Новый сбор” – начать создание нового сбора (эквивалент /new).
	•	“История сборов” – показать список всех ваших сборов (/history).
	•	“Помощь” – показать справку (/help).
	•	После /start бот ожидает, что пользователь нажмёт одну из кнопок меню или введёт соответствующую команду. Любой другой ввод (произвольный текст, не являющийся командой) на этом этапе не распознаётся – бот в ответ может напомнить: «Пожалуйста, выберите команду на клавиатуре ниже или введите /help для справки.» (это является поведением по умолчанию при непредусмотренном вводе).

Команда /help (Справка)

Сценарий: Пользователь запросил справочную информацию, набрав /help (либо выбрав кнопку “Помощь” в меню).
	•	Действия бота: выводит сообщение с описанием всех команд и краткими инструкциями по использованию. Например:
«Доступные команды:
/start – показать главное меню.
/new – создать новый сбор средств.
/paid – добавить поступивший платёж в текущий сбор.
/finish – завершить активный сбор.
/cancel – отменить текущий сценарий или удалить активный сбор.
/history – показать историю всех ваших сборов.
Вы можете использовать кнопки меню для навигации по боту.»
	•	Это статичный одноступенчатый ответ. После вывода справки бот повторно предлагает основные действия (может снова показать клавиатуру с кнопками “Новый сбор”, “История сборов” и т.д.). Пользователь далее выбирает следующую команду.
	•	Некорректный ввод: не применим – команда /help не предполагает дальнейшего ввода. Любые последующие сообщения пользователя обрабатываются как новые команды или игнорируются, если не распознаны (с повторным выводом подсказки, как описано в /start).

Команда /new (Создать новый сбор)

Сценарий: Пользователь запускает создание нового сбора средств (через команду /new или кнопку “Новый сбор”). Бот ведёт пользователя через серию шагов, собирая необходимую информацию.
	1.	Шаг 1 – Запрос названия сбора.
	•	Сообщение бота: «Введите название нового сбора (например, “Подарок коллеге”).» Бот может добавить подсказку: «Вы в любой момент можете отменить создание командой /cancel.»
	•	Ожидается от пользователя: текстовое название/описание цели сбора.
	•	Кнопки: на этом этапе бот предлагает кнопку “Отмена” (например, в виде inline-кнопки с командой /cancel), чтобы пользователь мог прервать создание.
	•	Обработка ввода:
	•	Если пользователь ввёл непустой текст, то бот принимает его. Пример корректного ввода: Подарок на день рождения.
	•	Бот сохраняет название во временном состоянии (например, в объекте с данными нового сбора: { name: "Подарок на день рождения" }).
	•	Ответ бота (подтверждение): «Название сохранено: “Подарок на день рождения”.» (Бот может повторить введённое название для подтверждения пользователю.) Затем бот переходит к следующему шагу.
	•	Если пользователь ничего не ввёл или сообщение состоит только из пробелов (пустое), такой ввод некорректен:
	•	Ответ бота (ошибка): «Название сбора не может быть пустым. Пожалуйста, введите название.» Бот повторно остаётся на шаге 1, ожидая корректного названия. (Кнопка “Отмена” по-прежнему доступна.)
	•	Если пользователь отправил команду /cancel на этом этапе (либо нажал кнопку “Отмена”):
	•	Бот прерывает сценарий создания. Ответ: «Создание сбора отменено.»
	•	Все уже полученные данные (в данном случае название) отбрасываются, новый сбор не создаётся.
	•	Бот возвращает пользователя в главное меню (повторно показывает клавиатуру с командами или предлагает выполнить другое действие).
	2.	Шаг 2 – Запрос целевой суммы. (Выполняется после успешного ввода названия на шаге 1.)
	•	Сообщение бота: «Укажите сумму, которую планируется собрать (целое число в рублях).» Например: «Введите цель сбора в рублях (только цифры).»
	•	Ожидается от пользователя: число – целевая сумма сбора.
	•	Кнопки: бот предлагает кнопки “Назад” и “Отмена”.
	•	“Назад” – возвращение к предыдущему шагу (название сбора). При нажатии “Назад”: бот снова переходит к шагу 1, позволяя ввести название заново. Примечание реализации: при возвращении можно либо заново запросить название (старое значение можно отбросить или показать пользователю текущее и позволить изменить). Проще – запросить повторно: «Введите название нового сбора.», как в начале.
	•	“Отмена” – прервать создание (аналогично описанному ранее).
	•	Обработка ввода суммы:
	•	Если пользователь ввёл корректное значение – непустое, состоит только из цифр, и больше нуля:
	•	Бот сохраняет сумму в данных нового сбора (например, теперь { name: "Подарок на день рождения", target: 10000 }).
	•	Ответ бота (подтверждение): «Целевая сумма: 10000 руб. Сохраняю…» (Бот подтверждает принятие суммы).
	•	Переход к завершению сценария создания (следующий этап).
	•	Если пользователь ввёл некорректное значение (не число, содержит буквы или специальные символы, или ноль/отрицательное):
	•	Ответ бота (ошибка): например, «Некорректная сумма. Введите, пожалуйста, число (без символов и букв), больше 0.»
	•	Бот остаётся на шаге 2, повторно ожидая корректный ввод суммы. Кнопки “Назад” и “Отмена” остаются доступны.
	•	Если пользователь нажал “Назад”:
	•	Бот возвращается к шагу 1 (запрос названия). Можно, например, ответить: «Изменение названия сбора. Введите новое название:* …»*. (Если нужно, можно сообщить текущее сохранённое название или просто запросить заново.)
	•	Продолжение сценария идёт снова с шага 1.
	•	Если пользователь отправил /cancel (или нажал “Отмена”) на этом шаге:
	•	Бот отменяет весь процесс создания, как описано выше: «Создание сбора отменено.», без сохранения данных в базу. Возврат в главное меню.
	3.	Завершение создания нового сбора.
	•	Это этап, наступающий после успешного получения и названия, и суммы.
	•	Действия бота: на этом шаге бот формирует новую запись сбора в базе данных. В БД сохраняются как минимум: название, целевая сумма, собранная сумма=0 (изначально), статус (активен), дата создания, а также привязка к пользователю.
	•	Сообщение бота (итоговое подтверждение): Бот отправляет пользователю финальное сообщение о создании сбора. Пример:
«✅ Новый сбор создан!
Название: “Подарок на день рождения”
Цель: 10000 руб.
Собрано: 0 руб.
Вы можете начать отмечать поступления командой /paid. Когда закончите сбор средств, введите /finish для завершения. Для отмены сбора без завершения используйте /cancel.»
(Каждый параметр подставляется из сохранённых данных. Формулировка может быть скорректирована, главное – отразить название и цель. Значок ✅ не обязателен, но подчеркнёт успешность операции.)
	•	Кнопки действий: Вместе с итоговым сообщением или сразу после него бот предоставляет пользователю удобные кнопки для следующих шагов:
	•	“Добавить платёж” – эквивалент команды /paid, сразу перейти к учёту поступивших средств для этого сбора.
	•	“Завершить сбор” – эквивалент /finish, если пользователь уже хочет закрыть сбор (например, цель достигнута мгновенно или передумал собирать).
	•	“Отменить сбор” – эквивалент /cancel, для удаления этого сбора.
	•	“Главное меню” – возвращение к основному меню (можно реализовать как команду /start или просто скрыть клавиатуру).
	•	Поведение далее: после создания нового сбора, он считается текущим активным сбором. Пользователь может воспользоваться предложенными кнопками или ввести новую команду вручную. Если вводится другая команда, не связанная напрямую (например, пользователь решит создать ещё один сбор /new), это возможно – бот может параллельно иметь несколько активных сборов. В этом случае при операциях /paid, /finish, /cancel будет предложен выбор, как описано ниже.

Команда /paid (Добавить платёж)

Сценарий: Пользователь хочет отметить, что получил/получен взнос (платёж) по какому-либо активному сбору. Он вводит команду /paid или нажимает кнопку “Добавить платёж”. Бот проведёт через шаги ввода информации о платеже и обновит данные сбора.
	•	Предварительная проверка: бот определяет, сколько активных (незавершённых и неотменённых) сборов числится за пользователем.
	•	Если нет ни одного активного сбора:
	•	Бот сразу отвечает сообщением: «У вас сейчас нет активного сбора, куда можно добавить платеж. Сначала создайте новый сбор командой /new.» (После этого бот может вернуть пользователя в меню или ожидать дальнейших команд.)
	•	Сценарий на этом заканчивается, так как добавлять нечего.
	•	Если ровно один активный сбор:
	•	Бот будет добавлять платёж в него по умолчанию, минуя шаг выбора. (Бот может внутренне определить currentCollection – например, последний созданный или не завершённый сбор.)
	•	Бот переходит непосредственно к шагу ввода данных платежа (см. Шаг 1 ниже).
	•	Если больше одного активного сбора:
	•	Бот запрашивает выбор сбора, в который следует внести платёж. Отправляется сообщение, например: «Выберите сбор, в который поступил платёж:».
	•	Пользователю показывается список его активных сборов — каждый представлен кнопкой с названием сбора. Также предусматривается кнопка “Отмена” для отказа от операции.
	•	Ожидается действие пользователя: клик по одной из кнопок с названием.
	•	Если нажата “Отмена” (или прислана команда /cancel): бот прерывает команду /paid, отвечает «Добавление платежа отменено.», никаких изменений не происходит, возвращается к основному состоянию.
	•	Если пользователь выбрал конкретный сбор: бот переходит к шагу ввода платежа, но теперь в контексте выбранного сбора (запоминаем selectedCollectionId). Бот продолжает диалог с шага 1.

Далее – пошаговый ввод данных о платеже (в случае, если определён целевой сбор для платежа):
	1.	Шаг 1 – Имя плательщика или комментарий.
	•	Сообщение бота: «Укажите, от кого поступил платёж, или добавьте комментарий к нему. Например: Иван Иванов.»
	•	Бот может уточнить: «Это поможет идентифицировать платеж. Вы также можете отменить операцию командой /cancel.»
	•	Ожидается от пользователя: текстовое сообщение с именем человека, сдавшего деньги, или кратким комментарием к поступлению (например, “за июль” или “от анонима”).
	•	Кнопки: на этом этапе, как минимум, “Отмена” (отменить добавление платежа).
	•	Обработка ввода:
	•	Если введён текст непустой, бот принимает его. Пример: пользователь отправил сообщение Иван.
	•	Бот сохраняет полученный текст как поле payerName или comment для нового платежа.
	•	Ответ бота (подтверждение): «Принято. Платёж от: Иван. Теперь введите сумму платежа (в рублях).» (Бот сразу переходит к запросу суммы, можно объединить подтверждение и следующий запрос в одном сообщении, или раздельно.)
	•	Переход к шагу 2.
	•	Если пользователь отправил сообщение, содержащее только пробелы или ничего (пустое):
	•	Ответ бота (ошибка): «Имя/комментарий не может быть пустым. Пожалуйста, укажите, от кого платёж.»
	•	Бот остаётся на шаге 1, повторно ожидая осмысленный текст.
	•	Если пользователь ввёл команду /cancel:
	•	Бот отменяет операцию добавления платежа. Ответ: «Добавление платежа отменено.»
	•	Ранее выбранный сбор остаётся без изменений, введённое на шаге 1 имя не сохраняется.
	•	Бот прекращает сценарий /paid, возвращаясь к ожиданию команд/меню.
	2.	Шаг 2 – Сумма платежа.
	•	Сообщение бота: (если не было объединено с предыдущим подтверждением) «Введите сумму полученного платежа цифрами (в рублях).»
	•	Ожидается от пользователя: положительное число (целое, можно ввести без разделителей).
	•	Кнопки: “Назад” и “Отмена”.
	•	“Назад” позволяет вернуться к шагу 1, если нужно исправить имя/комментарий платежа. При нажатии “Назад”: бот переходит к шагу 1, сохраняя выбранный сбор, и предлагает снова ввести имя плательщика. (Можно вывести ранее введённое имя в сообщении, например: «Изменение данных. Введите имя/комментарий для платежа (сейчас: Иван):», чтобы пользователь помнил, что было, и мог его изменить.)
	•	“Отмена” – прерывание операции (аналогично выше).
	•	Обработка ввода суммы:
	•	Если пользователь ввёл корректную сумму (положительное число):
	•	Бот парсит сумму, например 500.
	•	Бот сохраняет сумму во временных данных платежа, например { payerName: "Иван", amount: 500 }.
	•	Переходит к завершению добавления платежа.
	•	Если введено некорректно (не число, либо число <= 0, либо с буквами, например “500р” – не чисто число):
	•	Ответ бота (ошибка): «Некорректная сумма. Введите число без лишних символов, например 500.»
	•	Бот остаётся на шаге 2, ожидая корректный ввод. Кнопки “Назад” и “Отмена” сохраняются.
	•	Если пользователь нажал “Назад”:
	•	Бот возвращается на шаг 1 (запрос имени плательщика) для того же выбранного сбора.
	•	(При реализации следует учитывать, что выбранный сбор уже известен, его выбирать повторно не нужно, достаточно вернуть диалог к вводу имени.)
	•	Если пользователь отправил /cancel:
	•	Бот прерывает операцию добавления платежа, как описано выше. Ответ: «Добавление платежа отменено.»
	•	Ничего не сохраняется.
	3.	Завершение операции /paid. (Выполняется после получения имени и корректной суммы.)
	•	Действия бота: бот теперь сохраняет информацию о платеже в базе данных. Это включает: привязку к соответствующему сбору (ID сбора), сумму платежа, комментарий/имя, дату/время. Также бот обновляет поле “собрано” у данного сбора, прибавляя сумму нового платежа. (Важно: перед добавлением можно проверить дублирование – например, если два платежа с одинаковым именем и суммой; однако строгой необходимости нет, разные люди могут сдавать одинаковые суммы. Дублирование имен плательщиков не считается ошибкой, бот просто записывает как есть. Под “дублированием” в контексте ошибок скорее имеется в виду повторное создание сбора с тем же названием – об этом см. ниже заметку.)
	•	Сообщение бота (успех): Бот отсылает пользователю подтверждение. Пример:
«💰 Платёж получен: 500 руб от Иван.
Сбор “Подарок на день рождения” обновлён: теперь собрано 500 из 10000 руб.»
(Значок 💰 необязателен. В тексте обязательно упоминается сумма и, желательно, имя/комментарий, а также текущее состояние сбора: X из Y.)
	•	Если после этого сумма X (собрано) стала равна или больше цели Y, бот может добавить:
«Цель сбора достигнута! Вы можете завершить сбор командой /finish.» (если ровно достигнута или перевыполнена). Это служит обратной связью, но сам сбор остаётся активным, позволяя, например, собирать сверх цели, если нужно.
	•	Кнопки после добавления: Бот предлагает следующие варианты:
	•	“Добавить ещё платёж” – начать сценарий /paid заново для этого же сбора (если ожидается несколько платежей подряд). При нажатии этой кнопки бот может сразу перейти к шагу 1 нового платежа для того же сборa, минуя выбор сборa (так как контекст известен). Либо может спросить, для этого же или другого сбора — но, чтобы не усложнять, можно считать, что обычно пользователь добавляет несколько платежей в текущий сбор, пока не завершит его.
	•	“Завершить сбор” – завершить текущий сбор (/finish).
	•	“Главное меню” – вернуться к общему меню.
	•	Ошибки на этапе сохранения: маловероятны с точки зрения ввода, но возможны сбои (например, недоступна база данных). В случае технической ошибки бот отправит: «Ошибка сохранения данных, пожалуйста, попробуйте позже.» и не будет закрывать сценарий до успешного сохранения или отмены.

Команда /finish (Завершить сбор)

Сценарий: Пользователь инициирует завершение текущего сбора (возможно, достигнута цель или время истекло). Может быть вызвана командой /finish или кнопкой “Завершить сбор”.
	•	Предварительная проверка: бот определяет, сколько активных сборов есть у пользователя:
	•	Если нет активных сборов:
	•	Бот сразу отвечает сообщением: «У вас нет активных сборов для завершения.» (и предлагает создать /new или возвращается в меню).
	•	Сценарий на этом заканчивается.
	•	Если ровно один активный сбор:
	•	Бот переходит непосредственно к подтверждению завершения этого сбора (пропуская выбор, т.к. выбор однозначен).
	•	Если несколько активных сборов:
	•	Бот отправляет сообщение: «Выберите сбор, который хотите завершить:»
	•	Пользователь получает список своих активных сборов (названия) с кнопками, а также кнопку “Отмена” для отмены операции.
	•	Действия пользователя: выбирает нужный сбор или отменяет.
	•	При нажатии “Отмена” (или вводе /cancel): бот прерывает команду /finish, отправляет «Операция отменена.», возвращаясь к ожиданию команд.
	•	При выборе конкретного сбора: бот переходит к следующему шагу – подтверждению завершения – в контексте выбранного сборa.

	1.	Шаг 1 – Подтверждение завершения.
	•	Сообщение бота: Например: «Вы уверены, что хотите завершить сбор “Подарок на день рождения” сейчас? После завершения нельзя будет добавить новые платежи.»
	•	Кнопки:
	•	“✅ Завершить” – подтвердить завершение.
	•	“❌ Отмена” – отменить действие (если используется inline-клавиатура) либо пользователь может ввести /cancel.
	•	Ожидается от пользователя: выбор одного из вариантов.
	•	Обработка выбора:
	•	Если пользователь подтвердил (нажал “Завершить”):
	•	Бот помечает соответствующий сбор как завершённый. Реализуется обновлением статуса в базе данных (например, status = 'finished'), сохранением времени закрытия. Дальнейшие платежи в этот сбор не должны приниматься (нужно учитывать это в логике /paid: если сбор не активен, его нельзя выбрать).
	•	Примечание: Если у пользователя было несколько активных сборов, завершается только выбранный. Остальные остаются активными.
	•	Переход к шагу 2 (отправка результата).
	•	Если пользователь отменил (нажал “Отмена” либо командой):
	•	Бот отменяет операцию завершения. Действий со сбором не происходит, он остаётся активным.
	•	Ответ бота: «Сбор не был завершён.» (или «Операция отмены завершения выполнена, сбор продолжается.»).
	•	На этом сценарий команды /finish заканчивается; бот может вернуть пользователя в главное меню или просто ждать новых команд.
	2.	Шаг 2 – Результат завершения. (Выполняется если пользователь подтвердил завершение на шаге 1.)
	•	Сообщение бота: Бот отправляет итоговую информацию о только что завершённом сборе. Несколько вариантов в зависимости от достигнутого результата:
	•	Если сбор достиг цели или превысил: «Сбор “Подарок на день рождения” успешно завершён! 🎉 Собрана вся сумма: 10000/10000 руб.» (можно добавить эмоций, например конфетти).
	•	Если сбор не достиг цели: «Сбор “Подарок на день рождения” завершён. Итог: собрано 8000 из 10000 руб.» – констатация факта.
	•	Можно добавить: «Спасибо всем участникам!* – если уместно, хотя бот взаимодействует только с организатором, но можно в общем плане.
	•	В любом случае, бот должен чётко показать итоговую собранную сумму и целевую сумму, чтобы было видно, выполнен план или нет.
	•	Последствия: сбор переведён в статус завершённого, но сохраняется в базе (для истории).
	•	Дальнейшие действия: бот предлагает кнопки:
	•	“История сборов” – сразу посмотреть историю (где будет этот завершённый сбор).
	•	“Создать новый сбор” – если нужно начать другой.
	•	“Главное меню” – вернуться.
	•	После завершения одного сбора, если у пользователя остаются другие активные сборы, они по-прежнему доступны. Команды /paid или /finish для них будут работать, возможно с выбором (если >1 активный).

Команда /cancel (Отмена текущего действия или удаления сбора)

Сценарий: Пользователь использует команду /cancel либо кнопку “Отмена” в разных контекстах. Эта команда служит для прерывания текущего сценария либо отмены активного сбора. Логика разделяется на два случая:
	•	1. Отмена пошагового сценария. Если пользователь находится внутри незавершённого диалога (ответ на /new, /paid или /finish – на этапе выбора, подтверждения и т.п.), команда /cancel трактуется как прерывание сценария.
	•	Действие бота: немедленно выйти из текущего диалогового процесса. Бот отправляет сообщение, соответствующее контексту:
	•	При отмене создания нового сбора: «Создание сбора отменено.»
	•	При отмене добавления платежа: «Добавление платежа отменено.»
	•	При отмене операции завершения/удаления: «Операция отменена.» (или «Сбор не был изменён.»)
	•	Состояние: бот удаляет/не сохраняет промежуточные данные текущего сценария. Если, например, пользователь отменил на шаге 2 ввода суммы нового сбора – в БД ничего не записывается, и новый сбор не создаётся. Если отменил на подтверждении /finish – сбор остаётся активным, без изменений.
	•	Возврат пользователя: бот возвращает пользователя в нейтральное состояние, обычно предлагая главное меню или ожидая новую команду. Например, можно сразу повторно вывести главное меню: «Действие отменено. Можете выбрать другую команду.»
	•	Пользователь при желании может начать ту же операцию заново или другую. Команда /cancel не закрывает сессию с ботом, а только прерывает текущее действие.
	•	2. Отмена (удаление) активного сбора. Если пользователь вводит /cancel, когда никакой пошаговый сценарий не выполняется (т.е. бот в ожидании новой команды), тогда бот воспринимает /cancel как команду отменить существующий сбор целиком. (Часто пользователь может спутать назначение, поэтому важно подтверждение.)
	•	Предварительно: бот проверяет количество активных сборов:
	•	Если нет активных сборов:
	•	Бот отвечает: «Нет активных сборов, которые можно отменить.»
	•	Дальнейших действий нет (ничего отменять).
	•	Если один активный сбор:
	•	Бот переходит сразу к подтверждению отмены этого сбора. Например, сообщение: «Вы действительно хотите отменить сбор “Название”? Все данные этого сбора будут удалены.»
	•	Кнопки подтверждения:
	•	“✅ Отменить сбор” – подтверждение удаления.
	•	“❌ Назад” (или “Отмена”) – отказаться от удаления.
	•	Ожидается действие пользователя: подтверждение или отмена.
	•	При подтверждении: бот помечает сбор как отменённый. В зависимости от требований, может полностью удалить запись из базы или отметить status = 'canceled' и сохранить для истории. (Преимущество сохранения – можно отобразить его в /history как отменённый, чтобы не терять информацию о собранной сумме на момент отмены.)
	•	Бот отправляет сообщение: «Сбор “Название” отменён.» Можно добавить уточнение: «Данные этого сбора удалены и не будут отображаться в общем списке.» (либо, если сохраняем для истории: «Он будет отображён в истории как отменённый.»).
	•	После этого в базе нет активного сбора с таким ID; все связанные несданные платежи считаются не актуальными.
	•	При отказе (нажал “Назад”/“Отмена”):
	•	Бот не делает никаких изменений. Отвечает: «Сбор не был отменён.» (либо «Отмена операции.»).
	•	Сбор продолжает существовать активно. Пользователь возвращается к обычному режиму.
	•	Если несколько активных сборов:
	•	Бот сначала спрашивает, какой именно сбор отменить: «Выберите сбор, который хотите отменить (удалить):»
	•	Пользователь получает список своих активных сборов (как кнопки по названиям) плюс кнопку “Отмена” для выхода.
	•	Если пользователь выбрал сбор, бот запрашивает подтверждение удаления этого конкретного сбора (аналогично предыдущему случаю): «Вы уверены, что хотите удалить сбор “Название2”?» с кнопками “Отменить сбор” / “Назад”.
	•	Далее сценарий аналогичен: при подтверждении – удаляем/помечаем, при отказе – без изменений.
	•	Замечание: команда /cancel в контексте отмены существующего сбора должна использоваться осторожно. В документации можно подчеркнуть для пользователя в сообщении подтверждения, что данное действие необратимо.

Команда /history (История сборов)

Сценарий: Пользователь хочет просмотреть список всех своих сборов и их статусы/результаты. Команда /history или кнопка “История сборов” вызывает немедленный вывод информации (без пошагового диалога).
	•	Действия бота: бот обращается к базе данных и выбирает все сборы, связанные с данным пользователем (идентификация по user_id Telegram). Предпочтительно отсортировать их по дате создания или по статусу.
	•	Формат вывода: бот отправляет одно или несколько сообщений, содержащих упорядоченный список сборов. Разделим по статусам для читабельности:
	•	Если есть активные сборы (не завершённые и не отменённые на текущий момент):
	•	Бот сначала перечисляет активные. Например:
«Активные сборы:
– “Подарок на день рождения”: собрано 5000 из 10000 руб (продолжается)
– “Поездка на природу”: собрано 3000 из 5000 руб (продолжается)»
(Каждый сбор с названием и текущим прогрессом. Можно добавить процент выполнения цели в скобках или статус словами “продолжается”.)
	•	Если есть завершённые сборы:
	•	Ниже активных (или сразу, если активных нет) бот перечисляет завершённые. Например:
«Завершённые сборы:
– “Помощь приюту”: собрано 5000/5000 руб (100%, завершён)
– “Ремонт класса”: собрано 8000/10000 руб (80%, завершён)»
(Здесь указываем итоговую собранную сумму и цель, можно процент достижения и пометку “завершён”.)
	•	Если есть отменённые сборы (если мы решили хранить их):
	•	Перечисляем их отдельно. Например:
«Отменённые сборы:
– “Школьная экскурсия”: отменён (собрано 2000 руб из 10000 руб на момент отмены)».
(Отмечаем, сколько успели собрать, чтобы иметь контекст.)
	•	Если пользователь вообще не создавал сборов (список пуст):
	•	Бот отправляет: «Вы ещё не создавали ни одного сбора. Начните с команды /new.»
	•	Кнопки: обычно после истории можно предложить вернуться в меню. Например, кнопка “Главное меню”. Либо пользователь вручную дальше действует.
	•	Обновления данных: команда /history только читает информацию. Если нужно, бот может обновлять статус просроченных сборов (вдруг логика предполагает авто-завершение по времени, но в задаче об этом нет). Здесь достаточно вывести существующие данные.
	•	Поведение при некорректном вводе: после выдачи истории бот ожидает дальнейших команд. Если сразу после /history пользователь отправит что-то непонятное, применится общее правило: бот не поймёт и вежливо предложит воспользоваться меню или командой /help.

Дополнительные указания по реализации
	•	Структура реализации: Все описанные сценарии должны быть реализованы линейно, без вложенных сценарием и ролей. Это означает, что бот в каждый момент времени выполняет один конкретный диалоговый шаг с пользователем. Можно использовать конечный автомат состояний: например, хранить в памяти (или БД) состояние пользователя – ожидается ли от него название нового сбора, сумма, подтверждение и т.д. При получении входящего сообщения бот смотрит на текущее ожидаемое состояние и обрабатывает согласно указанной логике. Глубоко вложенные диалоги избегаются – все переходы явно прописаны, возврат “Назад” реализуется переключением состояния на предыдущий шаг.
	•	Кнопки: Использовать возможности Telegram для удобства пользователя:
	•	Основное меню (/start) можно реализовать Reply Keyboard с постоянными кнопками “Новый сбор”, “История сборов”, “Помощь”. Эти кнопки отправляют от имени пользователя соответствующие команды или текст, которые бот обработает как команды.
	•	В шагах сценариев лучше использовать Inline-кнопки для “Отмена”, “Назад”, выбора из списка и подтверждения, чтобы они были контекстными и не оставались висеть после завершения. (После выхода из сценария их можно убирать с помощью editMessageReplyMarkup или присылать новое сообщение без клавиатуры.)
	•	Все кнопки и сообщения должны быть на русском языке, как указано. Команды /start, /help и прочие пользователь может вводить на английском с слэшем, но при использовании меню ему не потребуется их печатать.
	•	Обработка ошибок и непредвиденного ввода:
	•	Для каждого ожидаемого ввода предусмотрены проверки и соответствующие ответы (описаны выше).
	•	Если пользователь вводит не то, что ожидается (текст вместо числа, неизвестную команду, и т.д.), бот не падает в ошибку, а отвечает понятным сообщением и повторяет запрос.
	•	Если пользователь вне активного сценария вводит что-то непонятное (ни команда, ни нажатие кнопки): бот может отправить короткое сообщение вроде «Не понимаю запрос. Используйте меню или команду /help.». Это поведение по умолчанию гарантирует, что пользователь не останется без ответа на произвольный ввод.
	•	Уникальность и дублирование:
	•	Дублирование сборов: Бот может проверить название нового сбора на дублирование среди активных сборов данного пользователя. Например, если пользователь попытается создать второй активный сбор с точно таким же названием, бот может уточнить: «У вас уже есть активный сбор с таким названием. Вы уверены, что хотите создать ещё один?» Либо сразу попросить придумать другое название. (Этот момент необязательный, но желательный для UX, чтобы не путаться. В простейшем случае допускаем одинаковые названия, различая сборы по внутреннему ID.)
	•	Дублирование команд: если пользователь запустил команду, не завершив предыдущую (например, набрал /new посреди сценария /new же), можно либо игнорировать новый вызов до окончания текущего сценария, либо прервать текущий и начать новый. Более безопасно – уведомить: «Пожалуйста, завершите текущую операцию или отмените её командой /cancel.»
	•	Хранение данных (БД):
	•	Нужно спроектировать модели данных для сборов и платежей. Один из вариантов:
	•	Collection (Сбор): поля: id (уникальный идентификатор), userId (идентификатор пользователя-владельца), name (название), target (целевое число), collected (сколько собрано на текущий момент), status (например, “active”, “finished”, “canceled”), createdAt (дата создания), finishedAt (дата завершения, если есть), canceledAt (дата отмены, если отменён).
	•	Payment (Платёж): поля: id, collectionId (связь с сбором), payerName (имя/комментарий), amount (сумма), date (дата добавления).
	•	При создании нового сбора (/new) — создаётся запись Collection (status = active, collected = 0).
	•	При добавлении платежа (/paid) — создаётся запись Payment, а поле collected у соответствующего Collection увеличивается.
	•	При завершении (/finish) — обновляется status на finished, проставляется finishedAt. (Можно также сохранить final collected = collected на момент завершения, хотя collected уже хранит итог.)
	•	При отмене (/cancel вне сценария) — либо удаляем Collection и все его Payments, либо обновляем статус на canceled и проставляем canceledAt. (Второй вариант лучше для истории.)
	•	Команда /history читает из базы все Collection данного userId и выводит по логике выше. Payments можно не перечислять, только суммовые итоги. (Опционально, можно сделать так, что нажав на какой-то сбор в истории, получить список всех платежей, но это за пределами текущего ТЗ.)
	•	Пример полной последовательности:
	1.	Пользователь: жмёт “Новый сбор”.
	2.	Бот: «Введите название нового сбора.»
	3.	Пользователь: Поездка на природу.
	4.	Бот: «Название сохранено: “Поездка на природу”. Введите цель в рублях.»
	5.	Пользователь: 5000.
	6.	Бот: «Целевая сумма: 5000 руб. ✅ Новый сбор создан! Название: “Поездка на природу”, Цель: 5000 руб, Собрано: 0 руб.» + кнопки “Добавить платёж”, “Завершить сбор”.
	7.	Пользователь: жмёт “Добавить платёж”.
	8.	Бот: «Укажите, от кого поступил платёж.»
	9.	Пользователь: Алексей.
	10.	Бот: «Принято. Введите сумму платежа.»
	11.	Пользователь: 3000.
	12.	Бот: «💰 Платёж получен: 3000 руб от Алексей. Сбор “Поездка на природу”: собрано 3000 из 5000 руб.» + кнопки “Добавить ещё платёж”, “Завершить сбор”.
	13.	Пользователь: жмёт “Завершить сбор” (решил закончить раньше цели).
	14.	Бот: «Вы уверены, что хотите завершить сбор “Поездка на природу” сейчас?» + кнопки “Завершить” / “Отмена”.
	15.	Пользователь: жмёт “Завершить”.
	16.	Бот: «Сбор “Поездка на природу” завершён. Итог: собрано 3000 из 5000 руб.» + кнопка “История сборов” / “Новый сбор”.
	17.	Пользователь: жмёт “История сборов”.
	18.	Бот: «Активных сборов нет.
Завершённые сборы:
– “Поездка на природу”: 3000/5000 руб (завершён)».

Этот пример отражает типовую последовательность действий и сообщения бота.

Конечное решение должно обеспечить интуитивно понятное взаимодействие: пользователь всегда знает, что от него ждет бот, получает понятные сообщения об ошибках и может легко навигировать с помощью кнопок. Вся текстовая составляющая готова для непосредственного использования в коде на TypeScript при отправке сообщений через Telegram Bot API.
