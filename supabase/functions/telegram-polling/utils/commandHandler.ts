
/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram –±–æ—Ç–∞
 */

import { 
  getUserCollections, 
  getActiveCollections, 
  createCollection 
} from "./collectionUtils.ts";
import { 
  DialogState, 
  CollectionCreationStep, 
  setDialogState, 
  resetDialogState,
  CollectionCreationData,
  PaymentFlowData,
  PaymentFlowStep
} from "./dialogStateManager.ts";
import { isUserAdmin } from "./databaseUtils.ts";

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start
 */
export async function handleStartCommand(
  message: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  try {
    const userId = message.from.id.toString();
    const userName = message.from.first_name || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await resetDialogState(userId, supabaseAdmin);
    
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    const keyboard = {
      keyboard: [
        [{ text: '/new' }, { text: '/history' }],
        [{ text: '/finish' }, { text: '/cancel' }],
        [{ text: '/paid' }, { text: '/help' }]
      ],
      resize_keyboard: true
    };
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const isAdmin = await isUserAdmin(userId, supabaseAdmin);
    console.log(`User ${userId} is admin: ${isAdmin}`);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if (isAdmin) {
      keyboard.keyboard.push([{ text: '/admin' }]);
    }
    
    const welcomeMessage = 
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}!\n\n` +
      "–Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –≤–µ–¥–µ–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å–±–æ—Ä–æ–≤. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n" +
      "/new - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–±–æ—Ä\n" +
      "/finish - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–±–æ—Ä\n" +
      "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–±–æ—Ä\n" +
      "/paid - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ\n" +
      "/history - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–±–æ—Ä–æ–≤\n" +
      "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n";
    
    const adminSuffix = isAdmin ? "\nüëë –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º." : "";
    
    return sendTelegramMessage(
      message.chat.id,
      welcomeMessage + adminSuffix,
      {
        parse_mode: "Markdown",
        reply_markup: JSON.stringify(keyboard)
      }
    );
  } catch (error) {
    console.error("Error in handleStartCommand:", error);
    return sendTelegramMessage(
      message.chat.id,
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help
 */
export async function handleHelpCommand(
  message: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  try {
    return handleStartCommand(message, supabaseAdmin, sendTelegramMessage);
  } catch (error) {
    console.error("Error in handleHelpCommand:", error);
    return sendTelegramMessage(
      message.chat.id,
      "–Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –≤–µ–¥–µ–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å–±–æ—Ä–æ–≤. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n" +
      "/new - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–±–æ—Ä\n" +
      "/finish - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–±–æ—Ä\n" +
      "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–±–æ—Ä\n" +
      "/paid - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ\n" +
      "/history - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–±–æ—Ä–æ–≤\n" +
      "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /new
 */
export async function handleNewCommand(
  message: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  try {
    const userId = message.from.id.toString();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const initialState: CollectionCreationData = {
      step: CollectionCreationStep.TITLE
    };
    
    await setDialogState(userId, DialogState.CREATING_COLLECTION, initialState, supabaseAdmin);
    
    return sendTelegramMessage(
      message.chat.id,
      "–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞:",
      {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: "–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data: "cancel_creation" }]
          ]
        })
      }
    );
  } catch (error) {
    console.error("Error in handleNewCommand:", error);
    return sendTelegramMessage(
      message.chat.id,
      "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /finish
 */
export async function handleFinishCommand(
  message: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  try {
    const userId = message.from.id.toString();
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const result = await getUserCollections(supabaseAdmin, userId, "active");
    
    if (!result.success) {
      console.error("Error getting user collections:", result.error);
      return sendTelegramMessage(
        message.chat.id,
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–±–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
    
    if (!result.collections || result.collections.length === 0) {
      return sendTelegramMessage(
        message.chat.id,
        "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å."
      );
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–±–æ—Ä–æ–≤
    const inlineKeyboard = result.collections.map(collection => ([{
      text: `${collection.title} (${collection.current_amount || 0}/${collection.target_amount} —Ä—É–±.)`,
      callback_data: `finish_select_${collection.id}`
    }]));
    
    return sendTelegramMessage(
      message.chat.id,
      "–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å:",
      {
        reply_markup: JSON.stringify({
          inline_keyboard: inlineKeyboard
        })
      }
    );
  } catch (error) {
    console.error("Error in handleFinishCommand:", error);
    return sendTelegramMessage(
      message.chat.id,
      "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–±–æ—Ä–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /cancel
 */
export async function handleCancelCommand(
  message: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  try {
    const userId = message.from.id.toString();
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const result = await getUserCollections(supabaseAdmin, userId, "active");
    
    if (!result.success) {
      console.error("Error getting user collections:", result.error);
      return sendTelegramMessage(
        message.chat.id,
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–±–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
    
    if (!result.collections || result.collections.length === 0) {
      return sendTelegramMessage(
        message.chat.id,
        "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å."
      );
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–±–æ—Ä–æ–≤
    const inlineKeyboard = result.collections.map(collection => ([{
      text: `${collection.title} (${collection.current_amount || 0}/${collection.target_amount} —Ä—É–±.)`,
      callback_data: `cancel_select_${collection.id}`
    }]));
    
    return sendTelegramMessage(
      message.chat.id,
      "–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å:",
      {
        reply_markup: JSON.stringify({
          inline_keyboard: inlineKeyboard
        })
      }
    );
  } catch (error) {
    console.error("Error in handleCancelCommand:", error);
    return sendTelegramMessage(
      message.chat.id,
      "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–±–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /paid
 */
export async function handlePaidCommand(
  message: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  try {
    const userId = message.from.id.toString();
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ—Ä—ã
    const result = await getActiveCollections(supabaseAdmin);
    
    if (!result.success) {
      console.error("Error getting active collections:", result.error);
      return sendTelegramMessage(
        message.chat.id,
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
    
    if (!result.collections || result.collections.length === 0) {
      return sendTelegramMessage(
        message.chat.id,
        "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—Ä–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂."
      );
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–±–æ—Ä–æ–≤
    const inlineKeyboard = result.collections.map(collection => ([{
      text: `${collection.title} (${collection.current_amount || 0}/${collection.target_amount} —Ä—É–±.)`,
      callback_data: `paid_select_${collection.id}`
    }]));
    
    return sendTelegramMessage(
      message.chat.id,
      "–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂:",
      {
        reply_markup: JSON.stringify({
          inline_keyboard: inlineKeyboard
        })
      }
    );
  } catch (error) {
    console.error("Error in handlePaidCommand:", error);
    return sendTelegramMessage(
      message.chat.id,
      "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /history
 */
export async function handleHistoryCommand(
  message: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  try {
    const userId = message.from.id.toString();
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const result = await getUserCollections(supabaseAdmin, userId);
    
    if (!result.success) {
      console.error("Error getting user collections:", result.error);
      return sendTelegramMessage(
        message.chat.id,
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–±–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
    
    if (!result.collections || result.collections.length === 0) {
      return sendTelegramMessage(
        message.chat.id,
        "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–±–æ—Ä–æ–≤."
      );
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–±–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const collectionsText = result.collections.map((collection, index) => {
      const status = {
        active: "üü¢ –ê–∫—Ç–∏–≤–µ–Ω",
        finished: "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω",
        cancelled: "‚ùå –û—Ç–º–µ–Ω–µ–Ω"
      }[collection.status] || collection.status;
      
      const deadline = new Date(collection.deadline).toLocaleDateString('ru-RU');
      
      return `${index + 1}. *${collection.title}*\n` +
        `–°—Ç–∞—Ç—É—Å: ${status}\n` +
        `–°—É–º–º–∞: ${collection.current_amount || 0}/${collection.target_amount} —Ä—É–±.\n` +
        `–î–µ–¥–ª–∞–π–Ω: ${deadline}\n`;
    }).join("\n");
    
    return sendTelegramMessage(
      message.chat.id,
      `*–í–∞—à–∏ —Å–±–æ—Ä—ã:*\n\n${collectionsText}`,
      { parse_mode: "Markdown" }
    );
  } catch (error) {
    console.error("Error in handleHistoryCommand:", error);
    return sendTelegramMessage(
      message.chat.id,
      "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–±–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /admin
 */
export async function handleAdminCommand(
  message: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  try {
    const userId = message.from.id.toString();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const isAdmin = await isUserAdmin(userId, supabaseAdmin);
    
    if (!isAdmin) {
      return sendTelegramMessage(
        message.chat.id,
        "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º."
      );
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    const adminKeyboard = {
      inline_keyboard: [
        [
          { text: "–í—Å–µ —Å–±–æ—Ä—ã", callback_data: "admin_all_collections" },
          { text: "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data: "admin_change_status" }
        ],
        [
          { text: "–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –í–ö–õ", callback_data: "admin_maintenance_on" },
          { text: "–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –í–´–ö–õ", callback_data: "admin_maintenance_off" }
        ]
      ]
    };
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    await setDialogState(userId, DialogState.ADMIN_MODE, { action: null }, supabaseAdmin);
    
    return sendTelegramMessage(
      message.chat.id,
      "üëë *–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      {
        parse_mode: "Markdown",
        reply_markup: JSON.stringify(adminKeyboard)
      }
    );
  } catch (error) {
    console.error("Error in handleAdminCommand:", error);
    return sendTelegramMessage(
      message.chat.id,
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
 */
export function handleCommand(
  message: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  try {
    const command = message.text.split(' ')[0].toLowerCase();
    const userId = message.from.id.toString();
    
    console.log(`Processing command: ${command} from user ${userId}`);
    
    switch(command) {
      case '/start':
        return handleStartCommand(message, supabaseAdmin, sendTelegramMessage);
      
      case '/help':
        return handleHelpCommand(message, supabaseAdmin, sendTelegramMessage);
      
      case '/new':
        return handleNewCommand(message, supabaseAdmin, sendTelegramMessage);
      
      case '/finish':
        return handleFinishCommand(message, supabaseAdmin, sendTelegramMessage);
      
      case '/cancel':
        return handleCancelCommand(message, supabaseAdmin, sendTelegramMessage);
      
      case '/paid':
        return handlePaidCommand(message, supabaseAdmin, sendTelegramMessage);
      
      case '/history':
        return handleHistoryCommand(message, supabaseAdmin, sendTelegramMessage);
      
      case '/admin':
        return handleAdminCommand(message, supabaseAdmin, sendTelegramMessage);
      
      default:
        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        return sendTelegramMessage(
          message.chat.id,
          "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
          {
            reply_markup: JSON.stringify({
              keyboard: [
                [{ text: '/new' }, { text: '/history' }],
                [{ text: '/finish' }, { text: '/cancel' }],
                [{ text: '/paid' }, { text: '/help' }]
              ],
              resize_keyboard: true
            })
          }
        );
    }
  } catch (error) {
    console.error("Error handling command:", error);
    
    return sendTelegramMessage(
      message.chat.id,
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  }
}
