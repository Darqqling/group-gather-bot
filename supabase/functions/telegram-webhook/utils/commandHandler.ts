/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram –±–æ—Ç–∞
 */

import { 
  getUserCollections, 
  getActiveCollections, 
  createCollection,
  getCollection
} from "./collectionUtils.ts";
import { 
  DialogState, 
  CollectionCreationStep, 
  setDialogState, 
  resetDialogState,
  CollectionCreationData,
  PaymentFlowData,
  PaymentFlowStep,
  getCollectionContext,
  setCollectionContext,
  clearCollectionContext
} from "./dialogStateManager.ts";
import { isUserAdmin } from "./databaseUtils.ts";
import { validateCommand, shouldClearContext } from "./commandValidator.ts";

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start
 */
export async function handleStartCommand(
  message: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  const userId = message.from.id.toString();
  const userName = message.from.first_name || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
  
  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await resetDialogState(userId, supabaseAdmin);
  
  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
  const keyboard = {
    keyboard: [
      [{ text: '/new' }, { text: '/history' }],
      [{ text: '/finish' }, { text: '/cancel' }],
      [{ text: '/paid' }, { text: '/help' }]
    ],
    resize_keyboard: true
  };
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  const isAdmin = await isUserAdmin(userId, supabaseAdmin);
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
  if (isAdmin) {
    keyboard.keyboard.push([{ text: '/admin' }]);
  }
  
  const welcomeMessage = 
    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}!\n\n` +
    "–Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ –≤–µ–¥–µ–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å–±–æ—Ä–æ–≤. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n" +
    "/new - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–±–æ—Ä\n" +
    "/finish - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–±–æ—Ä\n" +
    "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–±–æ—Ä\n" +
    "/paid - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ\n" +
    "/history - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–±–æ—Ä–æ–≤\n" +
    "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n";
  
  const adminSuffix = isAdmin ? "\nüëë –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º." : "";
  
  return sendTelegramMessage(
    message.chat.id,
    welcomeMessage + adminSuffix,
    {
      parse_mode: "Markdown",
      reply_markup: JSON.stringify(keyboard)
    }
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help
 */
export async function handleHelpCommand(
  message: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  return handleStartCommand(message, supabaseAdmin, sendTelegramMessage);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /new
 */
export async function handleNewCommand(
  message: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  const userId = message.from.id.toString();
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  const initialState: CollectionCreationData = {
    step: CollectionCreationStep.TITLE
  };
  
  await setDialogState(userId, DialogState.CREATING_COLLECTION, initialState, supabaseAdmin);
  
  return sendTelegramMessage(
    message.chat.id,
    "–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞:"
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /finish
 */
export async function handleFinishCommand(
  message: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  const userId = message.from.id.toString();
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const result = await getUserCollections(supabaseAdmin, userId, "active");
  
  if (!result.success) {
    return sendTelegramMessage(
      message.chat.id,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–±–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
  
  if (!result.collections || result.collections.length === 0) {
    return sendTelegramMessage(
      message.chat.id,
      "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å."
    );
  }
  
  // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–±–æ—Ä–æ–≤
  const inlineKeyboard = result.collections.map(collection => ([{
    text: `${collection.title} (${collection.current_amount || 0}/${collection.target_amount} —Ä—É–±.)`,
    callback_data: `finish_select_${collection.id}`
  }]));
  
  return sendTelegramMessage(
    message.chat.id,
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å:",
    {
      reply_markup: JSON.stringify({
        inline_keyboard: inlineKeyboard
      })
    }
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /cancel
 */
export async function handleCancelCommand(
  message: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  const userId = message.from.id.toString();
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const result = await getUserCollections(supabaseAdmin, userId, "active");
  
  if (!result.success) {
    return sendTelegramMessage(
      message.chat.id,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–±–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
  
  if (!result.collections || result.collections.length === 0) {
    return sendTelegramMessage(
      message.chat.id,
      "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å."
    );
  }
  
  // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–±–æ—Ä–æ–≤
  const inlineKeyboard = result.collections.map(collection => ([{
    text: `${collection.title} (${collection.current_amount || 0}/${collection.target_amount} —Ä—É–±.)`,
    callback_data: `cancel_select_${collection.id}`
  }]));
  
  return sendTelegramMessage(
    message.chat.id,
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å:",
    {
      reply_markup: JSON.stringify({
        inline_keyboard: inlineKeyboard
      })
    }
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /paid
 */
export async function handlePaidCommand(
  message: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  const userId = message.from.id.toString();
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–±–æ—Ä—ã
  const result = await getActiveCollections(supabaseAdmin);
  
  if (!result.success) {
    return sendTelegramMessage(
      message.chat.id,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–±–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
  
  if (!result.collections || result.collections.length === 0) {
    return sendTelegramMessage(
      message.chat.id,
      "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—Ä–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂."
    );
  }
  
  // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–±–æ—Ä–æ–≤
  const inlineKeyboard = result.collections.map(collection => ([{
    text: `${collection.title} (${collection.current_amount || 0}/${collection.target_amount} —Ä—É–±.)`,
    callback_data: `paid_select_${collection.id}`
  }]));
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
  const paymentData: PaymentFlowData = {
    step: PaymentFlowStep.SELECT_COLLECTION
  };
  
  await setDialogState(userId, DialogState.PAYMENT_FLOW, paymentData, supabaseAdmin);
  
  return sendTelegramMessage(
    message.chat.id,
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂:",
    {
      reply_markup: JSON.stringify({
        inline_keyboard: inlineKeyboard
      })
    }
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /history
 */
export async function handleHistoryCommand(
  message: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  try {
    console.log(`Handling history command for user ${message.from.id}`);
    
    // Fetch user collections with improved error handling
    const result = await getUserCollections(supabaseAdmin, message.from.id.toString());
    
    if (!result.success) {
      console.error("Error fetching user collections:", result.error);
      await sendTelegramMessage(
        message.chat.id,
        `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–±–æ—Ä–æ–≤: ${result.error}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
      );
      return;
    }
    
    const collections = result.collections || [];
    
    if (collections.length === 0) {
      await sendTelegramMessage(
        message.chat.id,
        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–±–æ—Ä–æ–≤."
      );
      return;
    }
    
    let historyText = "–í–∞—à–∏ —Å–±–æ—Ä—ã:\n";
    
    for (const [index, collection] of collections.entries()) {
      const status = collection.status === 'active' 
        ? '–ê–∫—Ç–∏–≤–µ–Ω' 
        : collection.status === 'finished' 
          ? '–ó–∞–≤–µ—Ä—à—ë–Ω' 
          : '–û—Ç–º–µ–Ω—ë–Ω';
      
      historyText += `${index + 1}. ${collection.title} (${status}) ‚Äî `;
      
      if (collection.status === 'active') {
        historyText += `${collection.target_amount} —Ä—É–±. –¥–æ ${new Date(collection.deadline).toLocaleDateString('ru-RU')}`;
      } else {
        historyText += `—Å–æ–±—Ä–∞–Ω–æ ${collection.current_amount || 0} —Ä—É–±.`;
      }
      
      historyText += "\n";
    }
    
    await sendTelegramMessage(
      message.chat.id,
      historyText
    );
    console.log("Successfully sent history to user");
  } catch (error) {
    console.error("Exception handling history command:", error);
    await sendTelegramMessage(
      message.chat.id,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–±–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /admin
 */
export async function handleAdminCommand(
  message: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  const userId = message.from.id.toString();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  const isAdmin = await isUserAdmin(userId, supabaseAdmin);
  
  if (!isAdmin) {
    return sendTelegramMessage(
      message.chat.id,
      "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º."
    );
  }
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
  const adminKeyboard = {
    inline_keyboard: [
      [
        { text: "–í—Å–µ —Å–±–æ—Ä—ã", callback_data: "admin_all_collections" },
        { text: "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data: "admin_change_status" }
      ],
      [
        { text: "–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –í–ö–õ", callback_data: "admin_maintenance_on" },
        { text: "–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –í–´–ö–õ", callback_data: "admin_maintenance_off" }
      ]
    ]
  };
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
  await setDialogState(userId, DialogState.ADMIN_MODE, { action: null }, supabaseAdmin);
  
  return sendTelegramMessage(
    message.chat.id,
    "üëë *–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    {
      parse_mode: "Markdown",
      reply_markup: JSON.stringify(adminKeyboard)
    }
  );
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
 */
function getStatusName(status: string): string {
  switch (status) {
    case "draft":
      return "–ß–µ—Ä–Ω–æ–≤–∏–∫";
    case "active":
      return "–ê–∫—Ç–∏–≤–µ–Ω";
    case "finished":
      return "–ó–∞–≤–µ—Ä—à—ë–Ω";
    case "cancelled":
      return "–û—Ç–º–µ–Ω—ë–Ω";
    default:
      return status;
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–æ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
 */
async function handleCommandWithNoContext(
  command: string,
  message: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  const userId = message.from.id.toString();
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userCollectionsResult = await getUserCollections(supabaseAdmin, userId);
  
  if (!userCollectionsResult.success || !userCollectionsResult.collections || userCollectionsResult.collections.length === 0) {
    return sendTelegramMessage(
      message.chat.id,
      "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–±–æ—Ä–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å–±–æ—Ä —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /new."
    );
  }
  
  // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–±–æ—Ä, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ
  if (userCollectionsResult.collections.length === 1) {
    const collection = userCollectionsResult.collections[0];
    
    await setCollectionContext(userId, {
      collectionId: collection.id,
      status: collection.status,
      title: collection.title
    }, supabaseAdmin);
    
    // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    return handleCommand(message, supabaseAdmin, sendTelegramMessage);
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–±–æ—Ä–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
  const inlineKeyboard = userCollectionsResult.collections.map(collection => ([{
    text: `${collection.title} (${getStatusName(collection.status)})`,
    callback_data: `select_context_${collection.id}_for_${command.substring(1)}`
  }]));
  
  return sendTelegramMessage(
    message.chat.id,
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä:",
    {
      reply_markup: JSON.stringify({
        inline_keyboard: inlineKeyboard
      })
    }
  );
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥, —Ç—Ä–µ–±—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
async function handleContextCommand(
  command: string,
  message: any,
  context: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  // –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ /setname, /setdescription –∏ —Ç.–¥.
  // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  
  const userId = message.from.id.toString();
  const chatId = message.chat.id;
  
  // –ü—Ä–∏–º–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /get - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–±–æ—Ä–µ
  if (command === '/get') {
    try {
      const collectionResult = await getCollection(supabaseAdmin, context.collectionId);
      
      if (!collectionResult.success || !collectionResult.collection) {
        return sendTelegramMessage(
          chatId,
          "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–±–æ—Ä. –íÔøΩÔøΩ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω."
        );
      }
      
      const collection = collectionResult.collection;
      const status = getStatusName(collection.status);
      const deadline = new Date(collection.deadline).toLocaleDateString('ru-RU');
      
      return sendTelegramMessage(
        chatId,
        `*${collection.title}*\n\n` +
        `–û–ø–∏—Å–∞–Ω–∏–µ: ${collection.description || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n` +
        `–°—Ç–∞—Ç—É—Å: ${status}\n` +
        `–°—É–º–º–∞: ${collection.current_amount || 0}/${collection.target_amount} —Ä—É–±.\n` +
        `–î–µ–¥–ª–∞–π–Ω: ${deadline}`,
        { parse_mode: "Markdown" }
      );
    } catch (error) {
      console.error("Error getting collection info:", error);
      return sendTelegramMessage(
        chatId,
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–±–æ—Ä–µ."
      );
    }
  }
  
  // –†–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥...
  
  return sendTelegramMessage(
    chatId,
    `–ö–æ–º–∞–Ω–¥–∞ ${command} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`
  );
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
 */
export function handleCommand(
  message: any,
  supabaseAdmin: any,
  sendTelegramMessage: Function
) {
  try {
    const commandText = message.text;
    const command = commandText.split(' ')[0].toLowerCase();
    const userId = message.from.id.toString();
    
    console.log(`Processing command: ${command} from user ${userId}`);
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
    const processCommand = async () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      if (shouldClearContext(command)) {
        // –Ø–≤–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å no_context: true
        console.log(`Command ${command} requires context reset`);
        await clearCollectionContext(userId, supabaseAdmin);
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–±–æ—Ä–∞
      let context = await getCollectionContext(userId, supabaseAdmin);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞
      if (context && context.collectionId) {
        const collectionResult = await getCollection(supabaseAdmin, context.collectionId);
        if (!collectionResult.success || !collectionResult.collection) {
          // –°–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
          await clearCollectionContext(userId, supabaseAdmin);
          context = null;
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–±–æ—Ä–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
          context.status = collectionResult.collection.status;
        }
      }
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
      const validationResult = validateCommand(command, context);
      console.log(`Command validation result:`, validationResult);
      
      if (!validationResult.allowed) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if (validationResult.error?.code === "NO_CONTEXT") {
          // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–∫—Å—Ç, –Ω–æ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Å–±–æ—Ä
          return handleCommandWithNoContext(command, message, supabaseAdmin, sendTelegramMessage);
        } else if (validationResult.error?.code === "CONTEXT_NOT_FOUND") {
          // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω, –Ω–æ —Å–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
          await clearCollectionContext(userId, supabaseAdmin);
          return sendTelegramMessage(
            message.chat.id,
            validationResult.error.message
          );
        } else if (validationResult.error?.code === "INVALID_STATUS") {
          // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
          return sendTelegramMessage(
            message.chat.id,
            validationResult.error.message
          );
        } else {
          // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
          return sendTelegramMessage(
            message.chat.id,
            validationResult.error?.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã."
          );
        }
      }
      
      // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
      switch(command) {
        case '/start':
          return handleStartCommand(message, supabaseAdmin, sendTelegramMessage);
        
        case '/help':
          return handleHelpCommand(message, supabaseAdmin, sendTelegramMessage);
        
        case '/new':
          return handleNewCommand(message, supabaseAdmin, sendTelegramMessage);
        
        case '/finish':
          return handleFinishCommand(message, supabaseAdmin, sendTelegramMessage);
        
        case '/cancel':
          return handleCancelCommand(message, supabaseAdmin, sendTelegramMessage);
        
        case '/paid':
          return handlePaidCommand(message, supabaseAdmin, sendTelegramMessage);
        
        case '/history':
          return handleHistoryCommand(message, supabaseAdmin, sendTelegramMessage);
        
        case '/admin':
          return handleAdminCommand(message, supabaseAdmin, sendTelegramMessage);
        
        case '/setname':
        case '/setdescription':
        case '/setamount':
        case '/setdate':
        case '/approve':
        case '/get':
          // –ö–æ–º–∞–Ω–¥—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
          return handleContextCommand(command, message, context, supabaseAdmin, sendTelegramMessage);
        
        default:
          // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
          return sendTelegramMessage(
            message.chat.id,
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
            {
              reply_markup: JSON.stringify({
                keyboard: [
                  [{ text: '/new' }, { text: '/history' }],
                  [{ text: '/finish' }, { text: '/cancel' }],
                  [{ text: '/paid' }, { text: '/help' }],
                  [{ text: '/start' }]
                ],
                resize_keyboard: true
              })
            }
          );
      }
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    return processCommand();
  } catch (error) {
    console.error("Error handling command:", error);
    
    return sendTelegramMessage(
      message.chat.id,
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  }
}
