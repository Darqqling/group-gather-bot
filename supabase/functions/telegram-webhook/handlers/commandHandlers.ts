
// Command handlers and related utilities for the Telegram bot

/**
 * Handle the /start command
 */
export async function handleStartCommand(message: any, sendTelegramMessage: Function) {
  console.log(`Sending start command response to ${message.chat.id}`);
  
  try {
    // Add keyboard markup for better UX
    const replyMarkup = {
      keyboard: [
        [{ text: '/new' }, { text: '/history' }],
        [{ text: '/finish' }, { text: '/cancel' }],
        [{ text: '/paid' }, { text: '/confirm' }]
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    };
    
    await sendTelegramMessage(
      message.chat.id,
      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–±–æ—Ä–æ–≤ —Å—Ä–µ–¥—Å—Ç–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
      "üìù /new - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–±–æ—Ä\n" +
      "‚úÖ /finish - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–±–æ—Ä\n" +
      "‚ùå /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–±–æ—Ä\n" +
      "üí∞ /paid - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É\n" +
      "‚úì /confirm - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∑–Ω–æ—Å (–¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤)\n" +
      "üìä /history - –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Å–±–æ—Ä–æ–≤",
      { reply_markup: JSON.stringify(replyMarkup) }
    );
  } catch (error) {
    console.error("Error handling start command:", error);
  }
}

/**
 * Handle the /new command
 */
export async function handleNewCommand(message: any, sendTelegramMessage: Function, supabaseAdmin: any) {
  try {
    // Update user state in database to indicate they're creating a new collection
    await supabaseAdmin
      .from("telegram_users")
      .update({ 
        current_state: "creating_collection",
        state_data: JSON.stringify({ step: "title" })
      })
      .eq("telegram_id", message.from.id.toString());
    
    await sendTelegramMessage(
      message.chat.id,
      "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
    );
  } catch (error) {
    console.error("Error handling new command:", error);
    await sendTelegramMessage(
      message.chat.id,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

/**
 * Handle the /finish command
 */
export async function handleFinishCommand(message: any, sendTelegramMessage: Function) {
  await sendTelegramMessage(
    message.chat.id,
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å:",
    {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{ text: "–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data: "list_collections_to_finish" }]
        ]
      })
    }
  );
}

/**
 * Handle the /cancel command
 */
export async function handleCancelCommand(message: any, sendTelegramMessage: Function) {
  await sendTelegramMessage(
    message.chat.id,
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å:",
    {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{ text: "–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data: "list_collections_to_cancel" }]
        ]
      })
    }
  );
}

/**
 * Handle the /paid command
 */
export async function handlePaidCommand(message: any, sendTelegramMessage: Function) {
  await sendTelegramMessage(
    message.chat.id,
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É:",
    {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{ text: "–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data: "list_collections_to_pay" }]
        ]
      })
    }
  );
}

/**
 * Handle the /confirm command (for organizers to confirm payments)
 */
export async function handleConfirmCommand(message: any, sendTelegramMessage: Function) {
  await sendTelegramMessage(
    message.chat.id,
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:",
    {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{ text: "–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data: "list_collections_to_confirm_payments" }]
        ]
      })
    }
  );
}

/**
 * Handle the /history command
 */
export async function handleHistoryCommand(message: any, sendTelegramMessage: Function, supabaseAdmin: any) {
  try {
    // Fetch user collections
    const { data: collections, error } = await supabaseAdmin
      .from("collections")
      .select("*")
      .eq("creator_id", message.from.id.toString())
      .order("created_at", { ascending: false });
    
    if (error) {
      throw error;
    }
    
    if (!collections || collections.length === 0) {
      await sendTelegramMessage(
        message.chat.id,
        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–±–æ—Ä–æ–≤."
      );
      return;
    }
    
    let historyText = "üìä *–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Å–±–æ—Ä–æ–≤:*\n\n";
    
    for (const collection of collections) {
      const status = collection.status === 'active' 
        ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' 
        : collection.status === 'finished' 
          ? '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω' 
          : '‚ùå –û—Ç–º–µ–Ω–µ–Ω';
      
      historyText += `*${collection.title}*\n`;
      historyText += `–°—Ç–∞—Ç—É—Å: ${status}\n`;
      historyText += `–¶–µ–ª—å: ${collection.target_amount} ‚ÇΩ\n`;
      historyText += `–°–æ–±—Ä–∞–Ω–æ: ${collection.current_amount || 0} ‚ÇΩ\n`;
      historyText += `–î–µ–¥–ª–∞–π–Ω: ${new Date(collection.deadline).toLocaleDateString()}\n\n`;
    }
    
    await sendTelegramMessage(
      message.chat.id,
      historyText,
      { parse_mode: "Markdown" }
    );
  } catch (error) {
    console.error("Error handling history command:", error);
    await sendTelegramMessage(
      message.chat.id,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–±–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

/**
 * Handle commands router
 */
export function handleCommand(message: any, sendTelegramMessage: Function, supabaseAdmin: any) {
  const command = message.text.split(' ')[0].toLowerCase();
  console.log(`Processing command: ${command}`);
  
  switch (command) {
    case '/start':
      return handleStartCommand(message, sendTelegramMessage);
    case '/new':
      return handleNewCommand(message, sendTelegramMessage, supabaseAdmin);
    case '/finish':
      return handleFinishCommand(message, sendTelegramMessage);
    case '/cancel':
      return handleCancelCommand(message, sendTelegramMessage);
    case '/paid':
      return handlePaidCommand(message, sendTelegramMessage);
    case '/confirm':
      return handleConfirmCommand(message, sendTelegramMessage);
    case '/history':
      return handleHistoryCommand(message, sendTelegramMessage, supabaseAdmin);
    default:
      return sendTelegramMessage(
        message.chat.id,
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, /new, /finish, /cancel, /paid, /confirm, /history.",
        {
          reply_markup: JSON.stringify({
            keyboard: [
              [{ text: '/new' }, { text: '/history' }],
              [{ text: '/finish' }, { text: '/cancel' }],
              [{ text: '/paid' }, { text: '/confirm' }],
              [{ text: '/start' }]
            ],
            resize_keyboard: true
          })
        }
      );
  }
}
