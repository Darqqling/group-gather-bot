// Command handlers and related utilities for the Telegram bot
import { updateUserState, clearUserState, getUserInfo } from "../utils/databaseUtils.ts";

/**
 * Handle the /start command
 */
export async function handleStartCommand(message: any, sendTelegramMessage: Function) {
  console.log(`Sending start command response to ${message.chat.id}`);
  
  try {
    // Add keyboard markup for better UX
    const replyMarkup = {
      keyboard: [
        [{ text: '/new' }, { text: '/history' }],
        [{ text: '/finish' }, { text: '/cancel' }],
        [{ text: '/paid' }]
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    };
    
    await sendTelegramMessage(
      message.chat.id,
      "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–±–æ—Ä–æ–≤ —Å—Ä–µ–¥—Å—Ç–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
      "üìù /new - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–±–æ—Ä\n" +
      "‚úÖ /finish - –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–±–æ—Ä\n" +
      "‚ùå /cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å–±–æ—Ä\n" +
      "üí∞ /paid - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É\n" +
      "üìä /history - –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Å–±–æ—Ä–æ–≤",
      { reply_markup: JSON.stringify(replyMarkup) }
    );
  } catch (error) {
    console.error("Error handling start command:", error);
  }
}

/**
 * Handle the /new command
 */
export async function handleNewCommand(message: any, sendTelegramMessage: Function, supabaseAdmin: any) {
  try {
    // Update user state in database to indicate they're creating a new collection
    const success = await updateUserState(
      message.from.id.toString(), 
      "creating_collection", 
      { step: "title" },
      supabaseAdmin
    );
    
    if (!success) {
      throw new Error("Failed to update user state");
    }
    
    await sendTelegramMessage(
      message.chat.id,
      "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
    );
  } catch (error) {
    console.error("Error handling new command:", error);
    await sendTelegramMessage(
      message.chat.id,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

/**
 * Handle the /finish command
 */
export async function handleFinishCommand(message: any, sendTelegramMessage: Function, supabaseAdmin: any) {
  try {
    // Get user's collections
    const { data: collections, error } = await supabaseAdmin
      .from("collections")
      .select("*")
      .eq("creator_id", message.from.id.toString())
      .eq("status", "active");
    
    if (error) {
      throw error;
    }
    
    if (!collections || collections.length === 0) {
      await sendTelegramMessage(
        message.chat.id,
        "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å."
      );
      return;
    }
    
    // If there's only one active collection, finish it directly
    if (collections.length === 1) {
      const collection = collections[0];
      await finishCollection(collection.id, message, sendTelegramMessage, supabaseAdmin);
      return;
    }
    
    // Otherwise, let the user choose which collection to finish
    const keyboard = collections.map(collection => [
      { text: collection.title, callback_data: `finish_collection:${collection.id}` }
    ]);
    
    await sendTelegramMessage(
      message.chat.id,
      "–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å:",
      {
        reply_markup: JSON.stringify({
          inline_keyboard: keyboard
        })
      }
    );
  } catch (error) {
    console.error("Error handling finish command:", error);
    await sendTelegramMessage(
      message.chat.id,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

async function finishCollection(collectionId: string, message: any, sendTelegramMessage: Function, supabaseAdmin: any) {
  try {
    // Update collection status
    const { data: collection, error } = await supabaseAdmin
      .from("collections")
      .update({ 
        status: "finished",
        last_updated_at: new Date().toISOString()
      })
      .eq("id", collectionId)
      .eq("creator_id", message.from.id.toString()) // Ensure user owns this collection
      .select()
      .single();
    
    if (error) {
      throw error;
    }
    
    await sendTelegramMessage(
      message.chat.id,
      `‚úÖ –°–±–æ—Ä "${collection.title}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!`
    );
    
    // Notify all participants
    // This will be implemented in a separate task for notifications
  } catch (error) {
    console.error("Error finishing collection:", error);
    await sendTelegramMessage(
      message.chat.id,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

/**
 * Handle the /cancel command
 */
export async function handleCancelCommand(message: any, sendTelegramMessage: Function, supabaseAdmin: any) {
  try {
    // Get user's collections
    const { data: collections, error } = await supabaseAdmin
      .from("collections")
      .select("*")
      .eq("creator_id", message.from.id.toString())
      .eq("status", "active");
    
    if (error) {
      throw error;
    }
    
    if (!collections || collections.length === 0) {
      await sendTelegramMessage(
        message.chat.id,
        "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å."
      );
      return;
    }
    
    // If there's only one active collection, ask for confirmation
    if (collections.length === 1) {
      const collection = collections[0];
      
      await sendTelegramMessage(
        message.chat.id,
        `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–±–æ—Ä "${collection.title}"?`,
        {
          reply_markup: JSON.stringify({
            inline_keyboard: [
              [
                { text: "–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data: `cancel_collection:${collection.id}` },
                { text: "–ù–µ—Ç", callback_data: "cancel_operation" }
              ]
            ]
          })
        }
      );
      return;
    }
    
    // Otherwise, let the user choose which collection to cancel
    const keyboard = collections.map(collection => [
      { text: collection.title, callback_data: `select_cancel:${collection.id}` }
    ]);
    
    await sendTelegramMessage(
      message.chat.id,
      "–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å:",
      {
        reply_markup: JSON.stringify({
          inline_keyboard: keyboard
        })
      }
    );
  } catch (error) {
    console.error("Error handling cancel command:", error);
    await sendTelegramMessage(
      message.chat.id,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

/**
 * Handle the /paid command
 */
export async function handlePaidCommand(message: any, sendTelegramMessage: Function, supabaseAdmin: any) {
  try {
    // Get active collections that the user can contribute to
    const { data: collections, error } = await supabaseAdmin
      .from("collections")
      .select("*")
      .eq("status", "active");
    
    if (error) {
      throw error;
    }
    
    if (!collections || collections.length === 0) {
      await sendTelegramMessage(
        message.chat.id,
        "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—Ä–æ–≤, –∫ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è."
      );
      return;
    }
    
    // Let the user choose a collection to pay for
    const keyboard = collections.map(collection => [
      { text: collection.title, callback_data: `select_payment:${collection.id}` }
    ]);
    
    await sendTelegramMessage(
      message.chat.id,
      "–í—ã–±–µ—Ä–∏—Ç–µ —Å–±–æ—Ä, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É:",
      {
        reply_markup: JSON.stringify({
          inline_keyboard: keyboard
        })
      }
    );
  } catch (error) {
    console.error("Error handling paid command:", error);
    await sendTelegramMessage(
      message.chat.id,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

/**
 * Handle the /history command
 */
export async function handleHistoryCommand(message: any, sendTelegramMessage: Function, supabaseAdmin: any) {
  try {
    // Fetch user collections
    const { data: collections, error } = await supabaseAdmin
      .from("collections")
      .select("*")
      .eq("creator_id", message.from.id.toString())
      .order("created_at", { ascending: false });
    
    if (error) {
      throw error;
    }
    
    if (!collections || collections.length === 0) {
      await sendTelegramMessage(
        message.chat.id,
        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–±–æ—Ä–æ–≤."
      );
      return;
    }
    
    let historyText = "üìä *–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Å–±–æ—Ä–æ–≤:*\n\n";
    
    for (const collection of collections) {
      const status = collection.status === 'active' 
        ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' 
        : collection.status === 'finished' 
          ? '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω' 
          : '‚ùå –û—Ç–º–µ–Ω–µ–Ω';
      
      historyText += `*${collection.title}*\n`;
      historyText += `–°—Ç–∞—Ç—É—Å: ${status}\n`;
      historyText += `–¶–µ–ª—å: ${collection.target_amount} ‚ÇΩ\n`;
      historyText += `–°–æ–±—Ä–∞–Ω–æ: ${collection.current_amount || 0} ‚ÇΩ\n`;
      historyText += `–î–µ–¥–ª–∞–π–Ω: ${new Date(collection.deadline).toLocaleDateString()}\n\n`;
    }
    
    await sendTelegramMessage(
      message.chat.id,
      historyText,
      { parse_mode: "Markdown" }
    );
  } catch (error) {
    console.error("Error handling history command:", error);
    await sendTelegramMessage(
      message.chat.id,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–±–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

/**
 * Handle the /admin command (restricted to admin users)
 */
export async function handleAdminCommand(message: any, sendTelegramMessage: Function, supabaseAdmin: any) {
  try {
    // Check if user is an admin (you would need an admins list or flag in db)
    const isAdmin = await checkIfAdmin(message.from.id.toString(), supabaseAdmin);
    
    if (!isAdmin) {
      await sendTelegramMessage(
        message.chat.id,
        "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
      );
      return;
    }
    
    // Present admin menu
    await sendTelegramMessage(
      message.chat.id,
      "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
      {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: "–†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è", callback_data: "admin_maintenance" }],
            [{ text: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "admin_stats" }]
          ]
        })
      }
    );
  } catch (error) {
    console.error("Error handling admin command:", error);
    await sendTelegramMessage(
      message.chat.id,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

// Utility to check if user is an admin (placeholder)
async function checkIfAdmin(telegramId: string, supabaseAdmin: any): Promise<boolean> {
  // This is a placeholder. In a real application, you would check against a list of admin IDs
  // or a flag in your database
  const { data, error } = await supabaseAdmin
    .from("app_settings")
    .select("value")
    .eq("key", "admin_telegram_ids")
    .single();
    
  if (error || !data) {
    console.error("Error checking admin status:", error);
    return false;
  }
  
  try {
    const adminIds = JSON.parse(data.value);
    return Array.isArray(adminIds) && adminIds.includes(telegramId);
  } catch (e) {
    console.error("Error parsing admin IDs:", e);
    return false;
  }
}

/**
 * Handle commands router
 */
export function handleCommand(message: any, sendTelegramMessage: Function, supabaseAdmin: any) {
  const command = message.text.split(' ')[0].toLowerCase();
  console.log(`Processing command: ${command}`);
  
  switch (command) {
    case '/start':
      return handleStartCommand(message, sendTelegramMessage);
    case '/new':
      return handleNewCommand(message, sendTelegramMessage, supabaseAdmin);
    case '/finish':
      return handleFinishCommand(message, sendTelegramMessage, supabaseAdmin);
    case '/cancel':
      return handleCancelCommand(message, sendTelegramMessage, supabaseAdmin);
    case '/paid':
      return handlePaidCommand(message, sendTelegramMessage, supabaseAdmin);
    case '/history':
      return handleHistoryCommand(message, sendTelegramMessage, supabaseAdmin);
    case '/admin':
      return handleAdminCommand(message, sendTelegramMessage, supabaseAdmin);
    default:
      return sendTelegramMessage(
        message.chat.id,
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, /new, /finish, /cancel, /paid, /history."
      );
  }
}
